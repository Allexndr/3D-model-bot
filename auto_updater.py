#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö 3D –º–æ–¥–µ–ª–µ–π
–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª @blocks_01 –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List
from channel_parser import ChannelParser
from database_factory import get_database
from config import TARGET_GROUP_USERNAME

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('auto_updater.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AutoUpdater:
    def __init__(self):
        self.parser = ChannelParser()
        self.db = get_database()
        self.check_interval = 1800  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.last_message_id = None
        
    async def get_last_processed_message_id(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π message_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            # –≠—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            max_id = self.db.get_max_message_id()
            if max_id:
                logger.info(f"üìä –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {max_id}")
                return max_id
            else:
                logger.info("üìä –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID: {e}")
            return None

    async def check_for_new_models(self) -> Dict[str, int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –≤ {TARGET_GROUP_USERNAME}...")
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not await self.parser.authenticate():
                return {'error': 'authentication_failed', 'new_models': 0}

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            last_id = await self.get_last_processed_message_id()
            
            new_models = []
            new_count = 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ—Å–ª–µ last_id)
            async for message in self.parser.client.iter_messages(
                TARGET_GROUP_USERNAME, 
                min_id=last_id if last_id else None,
                limit=1000  # –ú–∞–∫—Å–∏–º—É–º 1000 –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
            ):
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞
                    if not message.media:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
                    is_image = False
                    if hasattr(message.media, 'photo'):
                        is_image = True
                    elif hasattr(message.media, 'document'):
                        if message.media.document.mime_type and message.media.document.mime_type.startswith('image/'):
                            is_image = True
                    
                    if not is_image:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                    existing = self.db.get_model_by_message_id(message.id)
                    if existing:
                        continue
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                    text = message.message or ""
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 3D –º–æ–¥–µ–ª—å
                    text_lower = text.lower()
                    model_keywords = ['3d', '–º–æ–¥–µ–ª—å', 'model', 'max', 'obj', 'fbx', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–º–µ–±–µ–ª—å', 'decor']
                    
                    if not any(keyword in text_lower for keyword in model_keywords) and len(text) < 10:
                        continue
                    
                    # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    logger.info(f"üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}...")
                    embedding = await self.parser.download_and_analyze_image(message)
                    
                    if embedding is None:
                        continue
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
                    model_info = self.parser.extract_3d_info_from_text(text)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    try:
                        image_filename = f"model_{message.id}.jpg"
                        image_path = f"downloaded_images/{image_filename}"
                        await self.parser.client.download_media(message.media, image_path)
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                        image_filename = None
                    
                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message_link = f"https://t.me/{TARGET_GROUP_USERNAME.replace('@', '')}/{message.id}"
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑—É
                    self.db.save_model(
                        message_id=message.id,
                        group_id=TARGET_GROUP_USERNAME,
                        post_link=message_link,
                        title=model_info['title'] or f"3D Model {message.id}",
                        description=model_info['description'],
                        image_path=image_filename,
                        embedding=embedding.numpy() if hasattr(embedding, 'numpy') else embedding
                    )
                    
                    new_count += 1
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å: {model_info['title'][:50]}...")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                    continue
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await self.parser.client.disconnect()
            
            logger.info(f"üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π: {new_count}")
            return {'new_models': new_count, 'success': True}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π: {e}")
            return {'error': str(e), 'new_models': 0}

    async def run_continuous_monitoring(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval // 60} –º–∏–Ω—É—Ç")
        
        while True:
            try:
                start_time = datetime.now()
                logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ {start_time.strftime('%H:%M:%S')}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
                result = await self.check_for_new_models()
                
                end_time = datetime.now()
                duration = (end_time - start_time).seconds
                
                if result.get('success'):
                    new_count = result.get('new_models', 0)
                    total_models = self.db.get_models_count()
                    
                    logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration}—Å")
                    logger.info(f"üìä –ù–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π: {new_count}")
                    logger.info(f"üìä –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ: {total_models}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {result.get('error', 'Unknown')}")
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                logger.info(f"üò¥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {self.check_interval // 60} –º–∏–Ω—É—Ç...")
                await asyncio.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    updater = AutoUpdater()
    await updater.run_continuous_monitoring()

if __name__ == "__main__":
    asyncio.run(main()) 