#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import asyncio
import io
from datetime import datetime
from typing import List
import re
import time

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode

from config import BOT_TOKEN, MAX_IMAGE_SIZE, SUPPORTED_FORMATS, MAX_SEARCH_RESULTS
from image_analyzer_lite import ImageAnalyzer
from database_factory import get_database, get_database_info
from group_parser import GroupParser
from live_search import LiveSearchEngine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class Model3DBot:
    def __init__(self):
        self.image_analyzer = ImageAnalyzer()
        self.database = get_database()
        self.group_parser = GroupParser()
        self.live_search_engine = LiveSearchEngine(self.image_analyzer)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.usage_stats = {
            'total_searches': 0,
            'successful_searches': 0,
            'total_users': set(),
            'live_searches': 0,
            'db_searches': 0
        }
    
    def _get_category_icon(self, category: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        icons = {
            'furniture': 'ü™ë',
            'lighting': 'üí°',
            'decor': 'üè∫',
            'architecture': 'üèõÔ∏è',
            'ceiling': 'üè†',
            'bathroom': 'üöø',
            'kitchen': 'üç≥',
            'nature': 'üå∏',
            'vehicle': 'üöó',
            'people': 'üóø',
            'unknown': 'üì¶'
        }
        return icons.get(category, 'üì¶')
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        self.usage_stats['total_users'].add(user.id)
        
        welcome_message = f"""
üé® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 3D Models Search Bot!*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ 3D-–º–æ–¥–µ–ª–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –º–µ–±–µ–ª–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞, –∏ —è –Ω–∞–π–¥—É –ø–æ—Ö–æ–∂–∏–µ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

üîç *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (.jpg, .png, .webp)
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
3. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ 3D-–º–æ–¥–µ–ª–∏

üìä *–ö–æ–º–∞–Ω–¥—ã:*
/help - –ü–æ–º–æ—â—å
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/update - –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –º–æ–¥–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

üí° *–°–æ–≤–µ—Ç:* –õ—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!
        """
        
        await update.message.reply_text(
            welcome_message,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*

*–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞ –º–µ–±–µ–ª–∏ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞, –∏ –æ–Ω –Ω–∞–π–¥–µ—Ç –ø–æ—Ö–æ–∂–∏–µ 3D-–º–æ–¥–µ–ª–∏.

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*
‚Ä¢ JPG/JPEG
‚Ä¢ PNG  
‚Ä¢ WebP

*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10 –ú–ë
‚Ä¢ –õ—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ç–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

*–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
1. –î–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–µ–Ω
3. –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
4. –û–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ

‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.
        """
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        db_info = get_database_info()
        models_count = db_info['models_count']
        
        stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: *{db_info['type'].upper()}*
üì¶ –ú–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ: *{models_count}*

üîç *–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:*
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: *{self.usage_stats['total_searches']}*
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: *{self.usage_stats['successful_searches']}*
‚Ä¢ –ü–æ–∏—Å–∫ –≤ –ë–î: *{self.usage_stats['db_searches']}*
‚Ä¢ Live –ø–æ–∏—Å–∫: *{self.usage_stats['live_searches']}*

üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{len(self.usage_stats['total_users'])}*

üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: *{(self.usage_stats['successful_searches'] / max(1, self.usage_stats['total_searches']) * 100):.1f}%*

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        await update.message.reply_text(
            stats_text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def update_database_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        admin_ids = [5450018125]  # –í–∞—à Telegram ID
        
        if update.effective_user.id not in admin_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            await self.group_parser.update_database(limit=50)
            models_count = self.database.get_models_count()
            
            await update.message.reply_text(
                f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\nüìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π: {models_count}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    async def handle_image(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            self.usage_stats['total_searches'] += 1
            self.usage_stats['total_users'].add(update.effective_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if not update.message.photo:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo = update.message.photo[-1]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if photo.file_size and photo.file_size > MAX_IMAGE_SIZE:
                await update.message.reply_text(
                    f"‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_IMAGE_SIZE // (1024*1024)} –ú–ë"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è callback
            context.user_data['photo_file_id'] = photo.file_id
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
            models_count = self.database.get_models_count()
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞: –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∏–ª–∏ –≥–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            # –ü—Ä–∏ –≥–ª—É–±–æ–∫–æ–º –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –æ–Ω –≥–æ—Ç–æ–≤ –∂–¥–∞—Ç—å
            keyboard = [
                [
                    InlineKeyboardButton(
                        f"üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ ({models_count} –º–æ–¥–µ–ª–µ–π)",
                        callback_data="search_db"
                    )
                ],
                [InlineKeyboardButton("üî• –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ ‚Äì 1 –º–∏–Ω", callback_data="search_deep_1")],
                [InlineKeyboardButton("üî• –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ ‚Äì 3 –º–∏–Ω", callback_data="search_deep_3")],
                [InlineKeyboardButton("üî• –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ ‚Äì 5 –º–∏–Ω", callback_data="search_deep_5")],
                [InlineKeyboardButton("üî• –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ ‚Äì 10 –º–∏–Ω", callback_data="search_deep_10")],
                [InlineKeyboardButton("üî• –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ ‚Äì 30 –º–∏–Ω", callback_data="search_deep_30")],
                [InlineKeyboardButton("üî• –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ ‚Äì 60 –º–∏–Ω", callback_data="search_deep_60")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message_text = (
                "üîç *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:*\n\n"
                f"üèõÔ∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:* {models_count} –º–æ–¥–µ–ª–µ–π\n"
                "‚ö° *–ë—ã—Å—Ç—Ä–æ* \\(1\\-3 —Å–µ–∫—É–Ω–¥—ã\\)\n\n"
                "üî• *–ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫:* –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –∫–∞–Ω–∞–ª–∞\\.\n"
                "üß† *–ß–µ–º –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç, —Ç–µ–º –≤—ã—à–µ —Ç–æ—á–Ω–æ—Å—Ç—å*\n"
                "‚è±Ô∏è *–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≥–æ—Ç–æ–≤—ã –∂–¥–∞—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞*"
            )
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def handle_search_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        search_type = query.data
        photo_file_id = context.user_data.get('photo_file_id')
        
        if not photo_file_id:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            file = await context.bot.get_file(photo_file_id)
            image_bytes = await file.download_as_bytearray()
            
            if search_type == "search_db":
                await self.perform_database_search(query, bytes(image_bytes))
            elif search_type.startswith("search_deep_"):
                # –§–æ—Ä–º–∞—Ç: search_deep_<minutes>
                try:
                    minutes = int(search_type.split("_")[-1])
                except ValueError:
                    minutes = 3  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await self.perform_timed_deep_search(query, bytes(image_bytes), minutes)
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def perform_database_search(self, query, image_bytes: bytes):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        await query.edit_message_text("üîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            self.usage_stats['db_searches'] += 1
            
            # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –º–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            similar_models = self.image_analyzer.analyze_and_search(image_bytes)
            
            if not similar_models:
                await query.edit_message_text(
                    "üòî –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö –º–æ–¥–µ–ª–µ–π.\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
                    "‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ"
                )
                return
            
            self.usage_stats['successful_searches'] += 1
            await self.send_search_results_callback(query, similar_models, "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    
    async def perform_timed_deep_search(self, query, image_bytes: bytes, minutes: int):
        """–ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ª–∏–º–∏—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        await query.edit_message_text(
            f"üî• –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ –≤ –∫–∞–Ω–∞–ª–µ @blocks_01 –Ω–∞ {minutes} –º–∏–Ω‚Ä¶\n"
            "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
            "‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ\n\n[‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]"
        )

        try:
            self.usage_stats['live_searches'] += 1

            from PIL import Image
            image = Image.open(io.BytesIO(image_bytes))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ–∏—Å–∫ –≤ —Ñ–æ–Ω–µ
            search_task = asyncio.create_task(self.live_search_engine.custom_live_search(image, minutes))

            # –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            hard_timeout = minutes * 60  # —Å—Ç—Ä–æ–≥–∏–π –ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–∞, –±–µ–∑ –∑–∞–ø–∞—Å–∞
            start_ts = time.time()

            progress_states = [
                "[‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]", "[‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]", "[‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]", "[‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]",
                "[‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]", "[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë]", "[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë]", "[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë]",
                "[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë]", "[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë]", "[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà]"
            ]

            idx = 0
            while not search_task.done() and (time.time() - start_ts) < hard_timeout:
                bar = progress_states[idx % len(progress_states)]
                idx += 1
                await query.edit_message_text(
                    f"üî• –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ –≤ –∫–∞–Ω–∞–ª–µ @blocks_01 –Ω–∞ {minutes} –º–∏–Ω‚Ä¶\n"
                    "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
                    f"{bar}"
                )
                await asyncio.sleep(2.5)

            # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –µ—â—ë –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è (30 –º–∏–Ω –∏—Å—á–µ—Ä–ø–∞–Ω—ã) ‚Äì –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
            # –¥–∞–ª–µ–µ –ø—Ä–æ—Å—Ç–æ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–µ–∑ –¥–æ–ø. –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
            if not search_task.done():
                await query.edit_message_text(
                    "‚åõ 30-–º–∏–Ω—É—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω, —Ñ–æ—Ä–º–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã‚Ä¶"
                )

            # –ñ–¥—ë–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –±—ã—Å—Çp–∞—è)
            try:
                similar_models = await search_task
            except asyncio.CancelledError:
                # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—Å—ë-—Ç–∞–∫–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å
                similar_models = []
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
                similar_models = []

            if not similar_models:
                await query.edit_message_text(
                    "üòî –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ –Ω–µ –Ω–∞—à–µ–ª –ø–æ—Ö–æ–∂–∏—Ö –º–æ–¥–µ–ª–µ–π.\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: \n"
                    "‚Ä¢ –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
                    "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                )
                return

            self.usage_stats['successful_searches'] += 1
            await self.send_search_results_callback(query, similar_models, f"–≥–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ {minutes} –º–∏–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª—É–±–æ–∫–æ–º –ø–æ–∏—Å–∫–µ.")
    
    def _escape_md(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
        if not text:
            return ""
        # –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
        escape_chars = r"_*[]()~`>#+-=|{}.!"  # '!' —Ç–æ–∂–µ
        return re.sub(f"([{re.escape(escape_chars)}])", r"\\\\\\1", text)

    async def send_search_results_callback(self, query, similar_models: List[dict], search_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è callback"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (visual >= 0.9)
            exact_found = any(m.get('is_exact_match') for m in similar_models)

            if exact_found and search_type.lower().startswith("–≥–ª—É–±"):
                header = (
                    f"üéØ –ù–∞–π–¥–µ–Ω—ã —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ ‚â• 90%): {len(similar_models)} –º–æ–¥–µ–ª–µ–π\n\n"
                )
            elif not exact_found and search_type.lower().startswith("–≥–ª—É–±"):
                header = (
                    "üòî –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                    f"‚úÖ {search_type.title()}: –Ω–∞–π–¥–µ–Ω–æ {len(similar_models)} –ø–æ—Ö–æ–∂–∏—Ö –º–æ–¥–µ–ª–µ–π:\n\n"
                )
            else:
                header = f"‚úÖ {search_type.title()}: –Ω–∞–π–¥–µ–Ω–æ {len(similar_models)} –º–æ–¥–µ–ª–µ–π:\n\n"

            results_text = self._escape_md(header)
            
            keyboard = []
            
            for i, model in enumerate(similar_models, 1):
                similarity_percent = model.get('similarity', model.get('similarity_score', 0)) * 100
                category = model.get('detected_category', 'unknown')
                category_bonus = model.get('category_bonus', 0.0)
                visual_score = model.get('visual_score', similarity_percent/100)
                
                # –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_icon = self._get_category_icon(category)
                
                title = self._escape_md(model['title'])
                
                prefix_icon = "üéØ" if model.get('is_exact_match') else category_icon
                line = f"*{i}. {prefix_icon} {title}*\n"
                line += f"üìä –°—Ö–æ–¥—Å—Ç–≤–æ: {similarity_percent:.1f}%"
                if category_bonus > 0:
                    line += f" (–≤–∏–∑—É–∞–ª: {visual_score*100:.1f}% + –±–æ–Ω—É—Å: {category_bonus*100:.1f}%)"
                line += "\n"
                
                if model.get('description'):
                    desc = model['description'][:80] + "..." if len(model['description']) > 80 else model['description']
                    line += f"üìù {self._escape_md(desc)}\n"
                line += "\n"
                results_text += line
                
                keyboard.append([
                    InlineKeyboardButton(
                        f"üîó –ú–æ–¥–µ–ª—å {i} ({similarity_percent:.0f}%)",
                        url=model.get('message_link', model.get('post_link', '#'))
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                results_text,
                parse_mode=ParseMode.MARKDOWN_V2,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ callback: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await query.edit_message_text(
                    re.sub(r'[*_`~]', '', results_text),
                    reply_markup=reply_markup
                )
            except Exception as e2:
                logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e2}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    
    async def send_search_results(self, update: Update, processing_message, similar_models: List[dict]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            await processing_message.delete()
            
            results_text = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(similar_models)} –ø–æ—Ö–æ–∂–∏—Ö –º–æ–¥–µ–ª–µ–π:\n\n"
            
            keyboard = []
            
            for i, model in enumerate(similar_models, 1):
                similarity_percent = model['similarity_score'] * 100
                
                results_text += f"*{i}. {model['title']}*\n"
                results_text += f"üìä –°—Ö–æ–¥—Å—Ç–≤–æ: {similarity_percent:.1f}%\n"
                
                if model['description']:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    desc = model['description'][:100] + "..." if len(model['description']) > 100 else model['description']
                    results_text += f"üìù {desc}\n"
                
                results_text += "\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
                keyboard.append([
                    InlineKeyboardButton(
                        f"üîó –ú–æ–¥–µ–ª—å {i} ({similarity_percent:.0f}%)",
                        url=model['post_link']
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            keyboard.append([
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="search_again")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                results_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö 3D-–º–æ–¥–µ–ª–µ–π.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP"
        )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        
        if update and update.message:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ 3D Models Search Bot...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
    bot = Model3DBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("stats", bot.stats_command))
    application.add_handler(CommandHandler("update", bot.update_database_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
    application.add_handler(CallbackQueryHandler(bot.handle_search_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.PHOTO, bot.handle_image))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(bot.error_handler)
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"üìä –ú–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {bot.database.get_models_count()}")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 