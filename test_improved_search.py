#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
"""

import asyncio
from PIL import Image
import numpy as np
from image_analyzer import ImageAnalyzer
from database_factory import get_database

def create_test_image(size=(224, 224), color='RGB'):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return Image.new(color, size, (255, 255, 255))

async def test_improved_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    analyzer = ImageAnalyzer()
    database = get_database()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    all_models = database.get_all_models()
    print(f"üìä –ú–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(all_models)}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ
    print("\nüìà –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    categories = {}
    for model in all_models[:100]:  # –ü–µ—Ä–≤—ã–µ 100 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        text = (model.get('title', '') + ' ' + model.get('description', '')).lower()
        category = analyzer.classify_image_by_text(text)
        categories[category] = categories.get(category, 0) + 1
    
    for cat, count in sorted(categories.items(), key=lambda x: x[1], reverse=True):
        print(f"  {analyzer._get_category_icon(cat)} {cat}: {count}")
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
    
    # –¢–µ—Å—Ç 1: –°—Ç—É–ª
    test_image = create_test_image()
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å—Ç—É–ª–∞:")
    print("   üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞: furniture")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    embedding = analyzer.process_image(test_image)
    if embedding is not None:
        results = analyzer.find_similar_models_enhanced(embedding, 'furniture', 5)
        
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        for i, result in enumerate(results[:3], 1):
            similarity = result.get('similarity_score', 0)
            visual = result.get('visual_score', 0)
            bonus = result.get('category_bonus', 0)
            category = result.get('detected_category', 'unknown')
            
            print(f"   {i}. {analyzer._get_category_icon(category)} {result['title'][:40]}...")
            print(f"      üìä –û–±—â–∏–π —Å–∫–æ—Ä: {similarity:.3f}")
            print(f"      üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π: {visual:.3f}")
            print(f"      üéØ –ö–∞—Ç–µ–≥–æ—Ä. –±–æ–Ω—É—Å: {bonus:.3f}")
            print(f"      üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            print()
    
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏):")
    print("   üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞: unknown")
    
    if embedding is not None:
        results_old = analyzer.find_similar_models(embedding, 5)
        
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results_old)}")
        for i, result in enumerate(results_old[:3], 1):
            similarity = result.get('similarity_score', 0)
            category = result.get('detected_category', 'unknown')
            
            print(f"   {i}. {analyzer._get_category_icon(category)} {result['title'][:40]}...")
            print(f"      üìä –°–∫–æ—Ä: {similarity:.3f}")
            print(f"      üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            print()
    
    print("\nüí° –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ CLIP")
    print("   ‚Ä¢ –ë–æ–Ω—É—Å +15% –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("   ‚Ä¢ –ë–æ–Ω—É—Å +8% –∑–∞ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") 
    print("   ‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–π + –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä")
    print("   ‚Ä¢ –ë–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –º–µ–±–µ–ª–∏ –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞")
    
    print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç—É–ª—å—è")
    print("   –≤–º–µ—Å—Ç–æ –ø–æ—Ç–æ–ª–∫–æ–≤ –∏ –∑–µ—Ä–∫–∞–ª –¥–ª—è —Ñ–æ—Ç–æ —Å—Ç—É–ª–∞!")

def test_category_classification():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É:")
    
    analyzer = ImageAnalyzer()
    
    test_texts = [
        "77168376834851bca1a5 Decorative ceiling Wave ceiling",
        "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç—É–ª –∏–∑ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –∫—É—Ö–Ω–∏",
        "2071021.5b5ee8b6d2811 Promemoria - Michelle mirror",
        "–ö—Ä–µ—Å–ª–æ –æ—Ñ–∏—Å–Ω–æ–µ —á–µ—Ä–Ω–æ–µ –∫–æ–∂–∞–Ω–æ–µ",
        "9482552.58c7c83fab94a B&BMAXALTO3",
        "–õ–∞–º–ø–∞ –Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è LED —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è",
        "–®–∫–∞—Ñ-–∫—É–ø–µ –±–µ–ª—ã–π –≥–ª—è–Ω–µ—Ü 3 –¥–≤–µ—Ä–∏"
    ]
    
    for text in test_texts:
        category = analyzer.classify_image_by_text(text)
        icon = analyzer._get_category_icon(category)
        print(f"   {icon} \"{text[:50]}...\" ‚Üí {category}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_category_classification()
    asyncio.run(test_improved_search()) 