#!/usr/bin/env python3
"""
Live –ø–æ–∏—Å–∫ 3D –º–æ–¥–µ–ª–µ–π –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
–ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –º–æ–¥–µ–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä—è–º–æ –≤ –∫–∞–Ω–∞–ª–µ
"""

import asyncio
import logging
import time
from typing import List, Dict, Optional, Tuple
from telethon import TelegramClient, errors
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from PIL import Image
import torch
from io import BytesIO

from config import TELEGRAM_API_ID as API_ID, TELEGRAM_API_HASH as API_HASH, TARGET_GROUP_USERNAME
from image_analyzer import ImageAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class LiveSearchEngine:
    def __init__(self, image_analyzer: ImageAnalyzer | None = None):
        """–°–æ–∑–¥–∞—ë—Ç –¥–≤–∏–∂–æ–∫ –ø–æ–∏—Å–∫–∞.

        Args:
            image_analyzer: –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ImageAnalyzer. –ï—Å–ª–∏ –Ω–µ
                –ø–µ—Ä–µ–¥–∞–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä. –ü–µ—Ä–µ–¥–∞–≤–∞—è –≥–æ—Ç–æ–≤—ã–π
                —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–∑ –±–æ—Ç–∞, –º—ã –∏–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ CLIP-–º–æ–¥–µ–ª–∏,
                —ç–∫–æ–Ω–æ–º—è 1-2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞ –∏ ~2√ó –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.
        """
        self.client = None
        self.image_analyzer = image_analyzer or ImageAnalyzer()
        self.session_file = '3d_parser_session.session'
    
    async def authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Telegram"""
        try:
            self.client = TelegramClient(self.session_file, API_ID, API_HASH)
            await self.client.start()
            
            me = await self.client.get_me()
            logger.info(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {me.first_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False
    
    async def download_and_analyze_image(self, message) -> Optional[np.ndarray]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é (thumbnail) –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã
            # —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –∏ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ—Ç ‚Äì —Å–∫–∞—á–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª.
            image_bytes = BytesIO()

            try:
                # thumb=-1 ‚Äì —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π thumbnail (–æ–±—ã—á–Ω–æ ‚â§ 320 px)
                await self.client.download_media(message.media, image_bytes, thumb=-1)
                if image_bytes.getbuffer().nbytes == 0:
                    raise ValueError("Empty thumbnail")
            except Exception:
                # –§–æ–ª–±—ç–∫: —Å–∫–∞—á–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                image_bytes.seek(0)
                image_bytes.truncate(0)
                await self.client.download_media(message.media, image_bytes)
            
            # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_bytes.seek(0)
            image = Image.open(image_bytes)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
            embedding = self.image_analyzer.process_image(image)
            return embedding
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    def extract_model_info(self, text: str, message_id: int) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ 3D –º–æ–¥–µ–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        title = f"3D Model {message_id}"
        description = text[:200] if text else "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è 3D –º–æ–¥–µ–ª—å"
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        if text:
            lines = text.split('\n')
            if lines and len(lines[0]) > 5:
                title = lines[0][:50]
        
        return {
            'title': title,
            'description': description
        }
    
    async def live_search_similar_models(self, 
                                       query_image: Image.Image, 
                                       max_results: int = 5,
                                       search_limit: Optional[int] = 2000,
                                       exact_threshold: float = 0.90,
                                       time_limit_seconds: Optional[int] = None) -> List[Dict]:
        """
        Live –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –º–æ–¥–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            query_image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
            max_results: –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            search_limit: –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–∫–∞—Ç—å. –ï—Å–ª–∏ None, –∏—â–µ–º –ø–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏.
            exact_threshold: –ü–æ—Ä–æ–≥ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ (0-1) –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.
            time_limit_seconds: –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –ï—Å–ª–∏ None, –ª–∏–º–∏—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
        """
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π live –ø–æ–∏—Å–∫ –≤ –∫–∞–Ω–∞–ª–µ {TARGET_GROUP_USERNAME}")
            if search_limit is None:
                logger.info("üìä –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
            else:
                logger.info(f"üìä –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤ {search_limit} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not await self.authenticate():
                return []
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            logger.info("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            query_embedding = self.image_analyzer.process_image(query_image)
            if query_embedding is None:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return []
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
            query_category = self.image_analyzer.detect_query_category(query_image)
            logger.info(f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞: {query_category}")
            
            # –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            exact_visual_matches = []  # –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –≤–∏–∑—É–∞–ª—É (>= exact_threshold)
            category_matches = []      # –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            related_matches = []   # –†–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏  
            other_matches = []     # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            processed_count = 0
            
            # –ü–æ–∏—Å–∫ –≤ –∫–∞–Ω–∞–ª–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
            start_ts = time.time()
            async for message in self.client.iter_messages(TARGET_GROUP_USERNAME, limit=search_limit):
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º-–∞—É—Ç–∞
                    if time_limit_seconds is not None and (time.time() - start_ts) > time_limit_seconds:
                        logger.info("‚è∞ –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∞–ª–∏–∑–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π‚Ä¶")
                        break
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–µ–¥–∏–∞
                    if not message.media:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –º–µ–¥–∏–∞ (—Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                    is_image = False
                    if hasattr(message.media, 'photo'):
                        is_image = True
                    elif hasattr(message.media, 'document'):
                        if message.media.document.mime_type and message.media.document.mime_type.startswith('image/'):
                            is_image = True
                    
                    if not is_image:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 3D –º–æ–¥–µ–ª—å –ø–æ —Ç–µ–∫—Å—Ç—É
                    text = message.message or ""
                    text_lower = text.lower()
                    model_keywords = ['3d', '–º–æ–¥–µ–ª—å', 'model', 'max', 'obj', 'fbx', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–º–µ–±–µ–ª—å', 'decor', 'interior', 'exterior', 'furniture']
                    
                    is_3d_model = any(keyword in text_lower for keyword in model_keywords) or len(text) < 20
                    
                    if not is_3d_model:
                        continue
                    
                    processed_count += 1
                    if processed_count % 10 == 0:
                        logger.info(f"üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {processed_count} –º–æ–¥–µ–ª–µ–π...")
                    
                    # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
                    model_embedding = await self.download_and_analyze_image(message)
                    if model_embedding is None:
                        continue
                    
                    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
                    visual_score = cosine_similarity(
                        query_embedding.reshape(1, -1),
                        model_embedding.reshape(1, -1)
                    )[0][0]
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–±–µ–∑ –±–æ–Ω—É—Å–æ–≤)
                    if visual_score >= exact_threshold:
                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
                        model_info = self.extract_model_info(text, message.id)

                        message_link = f"https://t.me/{TARGET_GROUP_USERNAME.replace('@', '')}/{message.id}"

                        exact_visual_matches.append({
                            'title': model_info['title'],
                            'description': model_info['description'],
                            'similarity': float(visual_score),
                            'visual_score': float(visual_score),
                            'category_bonus': 0.0,
                            'detected_category': 'unknown',
                            'category_match_type': 'exact_visual',
                            'is_exact_match': True,
                            'message_link': message_link,
                            'message_id': message.id
                        })
                        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {visual_score:.3f} - {model_info['title'][:40]}...")

                        # –°–æ–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                        if len(exact_visual_matches) >= max_results:
                            break

                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ 0.45
                        continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é

                    # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Å—Ö–æ–¥—Å—Ç–≤—É –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
                    if visual_score < 0.45:
                        continue
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
                    model_info = self.extract_model_info(text, message.id)
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                    model_category = self.image_analyzer.classify_image_by_text(text)
                    
                    # –£—Å–∏–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤
                    category_bonus = 0.0
                    category_match_type = 'none'
                    
                    if query_category != 'unknown' and model_category != 'unknown':
                        if query_category == model_category:
                            category_bonus = 0.25  # –£–≤–µ–ª–∏—á–µ–Ω –±–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                            category_match_type = 'exact'
                        elif self.image_analyzer._categories_related(query_category, model_category):
                            category_bonus = 0.12  # –£–≤–µ–ª–∏—á–µ–Ω –±–æ–Ω—É—Å –∑–∞ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                            category_match_type = 'related'
                    
                    # –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä
                    final_score = visual_score + category_bonus
                    
                    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                    message_link = f"https://t.me/{TARGET_GROUP_USERNAME.replace('@', '')}/{message.id}"
                    
                    result = {
                        'title': model_info['title'],
                        'description': model_info['description'],
                        'similarity': float(final_score),
                        'visual_score': float(visual_score),
                        'category_bonus': float(category_bonus),
                        'detected_category': model_category,
                        'category_match_type': category_match_type,
                        'is_exact_match': False,
                        'message_link': message_link,
                        'message_id': message.id
                    }
                    
                    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
                    if category_match_type == 'exact':
                        category_matches.append(result)
                        logger.info(f"üéØ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {final_score:.3f} ({model_category}) - {model_info['title'][:30]}...")
                    elif category_match_type == 'related':
                        related_matches.append(result)
                        logger.info(f"üîó –†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {final_score:.3f} ({model_category}) - {model_info['title'][:30]}...")
                    else:
                        other_matches.append(result)
                        logger.info(f"üì¶ –î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {final_score:.3f} ({model_category}) - {model_info['title'][:30]}...")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                    continue
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await self.client.disconnect()
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            logger.info(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:")
            logger.info(f"   üéØ –¢–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ({query_category}): {len(category_matches)}")
            logger.info(f"   üîó –†–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(related_matches)}")
            logger.info(f"   üì¶ –î—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(other_matches)}")
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            category_matches.sort(key=lambda x: x['similarity'], reverse=True)
            related_matches.sort(key=lambda x: x['similarity'], reverse=True)
            other_matches.sort(key=lambda x: x['similarity'], reverse=True)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö
            if exact_visual_matches:
                exact_visual_matches.sort(key=lambda x: x['similarity'], reverse=True)
                final_results = exact_visual_matches[:max_results]
                logger.info(f"üèÜ –ù–∞–π–¥–µ–Ω–æ {len(final_results)} —Ç–æ—á–Ω—ã—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫.")
                # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                await self.client.disconnect()
                return final_results

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç)
            final_results = []
            if query_category != 'unknown':
                if len(category_matches) >= max_results:
                    final_results = category_matches[:max_results]
                elif len(category_matches) > 0:
                    remaining_slots = max_results - len(category_matches)
                    final_results = category_matches[:]
                    final_results.extend(related_matches[:remaining_slots//2])
                    final_results.extend(other_matches[:remaining_slots - len(related_matches[:remaining_slots//2])])
                    final_results = final_results[:max_results]
                else:
                    final_results = related_matches[:max_results//2] + other_matches[:max_results//2]
            else:
                all_results = category_matches + related_matches + other_matches
                all_results.sort(key=lambda x: x['similarity'], reverse=True)
                final_results = all_results[:max_results]
            
            logger.info(f"üéâ Live –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {processed_count}")
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(category_matches + related_matches + other_matches)}")
            logger.info(f"üèÜ –ò—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(final_results)}")
            
            # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for i, result in enumerate(final_results, 1):
                match_icon = "üéØ" if result['category_match_type'] == 'exact' else "üîó" if result['category_match_type'] == 'related' else "üì¶"
                logger.info(f"   {i}. {match_icon} {result['similarity']:.3f} ({result['detected_category']}) - {result['title'][:40]}...")
            
            return final_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ live –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    async def quick_live_search(self, query_image: Image.Image) -> List[Dict]:
        """–ë—ã—Å—Ç—Ä—ã–π live –ø–æ–∏—Å–∫ (500 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        return await self.live_search_similar_models(
            query_image=query_image,
            max_results=5,
            search_limit=500  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        )
    
    async def deep_live_search(self, query_image: Image.Image) -> List[Dict]:
        """–ì–ª—É–±–æ–∫–∏–π live –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
        return await self.live_search_similar_models(
            query_image=query_image,
            max_results=8,
            search_limit=None,  # –ò—â–µ–º –ø–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
            exact_threshold=0.90
        )

    async def custom_live_search(self, query_image: Image.Image, minutes: int = 3, max_results: int = 8) -> List[Dict]:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π live-–ø–æ–∏—Å–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö).

        –ü–æ–¥–±–∏—Ä–∞–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π search_limit (–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞) –∏—Å—Ö–æ–¥—è –∏–∑
        —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞. –¶–µ–ª—å ‚Äî –ª–∏–Ω–µ–π–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –≥–ª—É–±–∏–Ω—É
        –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏–µ–º–ª–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞.

        Args:
            query_image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–ø—Ä–æ—Å.
            minutes: –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∂–¥–∞—Ç—å (1-60).
            max_results: –°–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ—Ä–Ω—É—Ç—å.
        """
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        minutes = max(1, min(minutes, 60))

        # –î–æ 30 –º–∏–Ω—É—Ç ‚Äì –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º minutes*500 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.  
        # 30 –º–∏–Ω—É—Ç –∏ –±–æ–ª–µ–µ ‚Äì –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞.

        messages_per_min = 500

        if minutes >= 30:
            search_limit = None  # –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è
        else:
            search_limit = minutes * messages_per_min

        # –î–ª—è –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ (<2 –º–∏–Ω) —É–º–µ–Ω—å—à–∞–µ–º max_results –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        if minutes <= 2 and max_results > 5:
            max_results = 5

        return await self.live_search_similar_models(
            query_image=query_image,
            max_results=max_results,
            search_limit=search_limit,
            exact_threshold=0.90,
            time_limit_seconds=minutes*60,
        )

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ live –ø–æ–∏—Å–∫–∞
async def test_live_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ live –ø–æ–∏—Å–∫–∞"""
    from PIL import Image
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image = Image.new('RGB', (256, 256), color='white')
    
    search_engine = LiveSearchEngine()
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Live Search...")
    print("=" * 50)
    
    # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
    print("‚ö° –ë—ã—Å—Ç—Ä—ã–π live –ø–æ–∏—Å–∫ (500 —Å–æ–æ–±—â–µ–Ω–∏–π)...")
    start_time = time.time()
    results = await search_engine.quick_live_search(test_image)
    quick_time = time.time() - start_time
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞: {quick_time:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    
    for i, result in enumerate(results, 1):
        print(f"{i}. {result['similarity']:.3f} - {result['title']}")
    
    print("\n" + "=" * 50)

if __name__ == "__main__":
    asyncio.run(test_live_search()) 